[
  {
    "objectID": "Practical_day4.html",
    "href": "Practical_day4.html",
    "title": "Practical Day 4",
    "section": "",
    "text": "Code\n####set-up####\n#====Install tidyverse====#\n\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\n#====Install and load nycflights13 for flight data====#\n\nif (!requireNamespace(\"nycflights13\", quietly = TRUE)) {\n  install.packages(\"nycflights13\")\n}\nlibrary(nycflights13)\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\n\n#====call packages====#\n\nlibrary(dplyr)\nlibrary(tidyr)\n\n\n#====Using the flights and airlines dataset====#\n\ndata(\"flights\")\ndata(\"airlines\")"
  },
  {
    "objectID": "Practical_day4.html#installing-all-packages-and-loading-data-sets",
    "href": "Practical_day4.html#installing-all-packages-and-loading-data-sets",
    "title": "Practical Day 4",
    "section": "",
    "text": "Code\n####set-up####\n#====Install tidyverse====#\n\nif (!requireNamespace(\"tidyverse\", quietly = TRUE)) {\n  install.packages(\"tidyverse\")\n}\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\n#====Install and load nycflights13 for flight data====#\n\nif (!requireNamespace(\"nycflights13\", quietly = TRUE)) {\n  install.packages(\"nycflights13\")\n}\nlibrary(nycflights13)\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) {\n  install.packages(\"dplyr\")\n}\n\n#====call packages====#\n\nlibrary(dplyr)\nlibrary(tidyr)\n\n\n#====Using the flights and airlines dataset====#\n\ndata(\"flights\")\ndata(\"airlines\")"
  },
  {
    "objectID": "Practical_day4.html#re-writing-the-code-using-dplyr",
    "href": "Practical_day4.html#re-writing-the-code-using-dplyr",
    "title": "Practical Day 4",
    "section": "2.1 Re-writing the code using Dplyr",
    "text": "2.1 Re-writing the code using Dplyr\n\n\nCode\n####re-write code####\n\ndist_tbl &lt;- flights |&gt;          # Pipe result to next step\n  filter(month == 1) |&gt;         # Filter January flights\n  group_by(carrier) |&gt;          # Pipe into group_by()\n  summarise(\n    mean_distance = mean(distance, na.rm = TRUE), \n    sd_distance = sd(distance, na.rm = TRUE)\n  ) |&gt;                          # Pipe into arrange()\n  arrange(mean_distance)\ndist_tbl\n\n\n# A tibble: 16 × 3\n   carrier mean_distance sd_distance\n   &lt;chr&gt;           &lt;dbl&gt;       &lt;dbl&gt;\n 1 YV               229          0  \n 2 9E               476.       334. \n 3 EV               522.       294. \n 4 US               536.       553. \n 5 MQ               566.       223. \n 6 FL               691.       142. \n 7 OO               733         NA  \n 8 WN               942.       496. \n 9 B6              1062.       681. \n10 DL              1220.       644. \n11 AA              1350.       626. \n12 UA              1462.       778. \n13 F9              1620          0  \n14 AS              2402          0  \n15 VX              2495.        98.2\n16 HA              4983          0"
  },
  {
    "objectID": "Practical_day4.html#question-3",
    "href": "Practical_day4.html#question-3",
    "title": "Practical Day 4",
    "section": "2.2 Question 3",
    "text": "2.2 Question 3\n\n\nCode\n####Question3####\n#====Create a data frame with one carrier having only one flight====#\n\nflight1 &lt;- tibble(\n  carrier = c(\"AA\", \"AA\", \"AA\", \"BB\"),\n  distance = c(1000, 1000, 1000, 1500)\n)\n\n#====Group by carrier and calculate mean and standard deviation====#\n\nflight_stats &lt;- flight1 %&gt;%\n  group_by(carrier) %&gt;%\n  summarise(\n    mean_distance = mean(distance),\n    sd_distance = sd(distance)  # NA for carrier \"BB\" as only one observation\n  )\ncat(\"As seen below, carriers with only one flight has a standard deviation of NA while those with a standard deviation of 0 is due to carriers having the same distances\")\n\n\nAs seen below, carriers with only one flight has a standard deviation of NA while those with a standard deviation of 0 is due to carriers having the same distances\n\n\nCode\nprint(flight_stats)\n\n\n# A tibble: 2 × 3\n  carrier mean_distance sd_distance\n  &lt;chr&gt;           &lt;dbl&gt;       &lt;dbl&gt;\n1 AA               1000           0\n2 BB               1500          NA"
  },
  {
    "objectID": "Practical_day4.html#question-4",
    "href": "Practical_day4.html#question-4",
    "title": "Practical Day 4",
    "section": "2.3 Question 4",
    "text": "2.3 Question 4\n\n\nCode\n####Question4####\n#====average departure delay per carrier per month and reshape====#\n\ncarrier_delay_by_month &lt;- flights %&gt;%\n  group_by(month, carrier) %&gt;%\n  summarise(avg_dep_delay = mean(dep_delay, na.rm = TRUE)) %&gt;%\n  pivot_wider(names_from = carrier, values_from = avg_dep_delay)\n\n\n`summarise()` has grouped output by 'month'. You can override using the\n`.groups` argument.\n\n\nCode\ncat(\"The average departure delay per carrier per month and reshape\")\n\n\nThe average departure delay per carrier per month and reshape\n\n\nCode\nprint(carrier_delay_by_month)\n\n\n# A tibble: 12 × 17\n# Groups:   month [12]\n   month  `9E`    AA     AS    B6    DL    EV    F9    FL    HA    MQ    OO\n   &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     1 16.9   6.93  7.35   9.49  3.85 24.2  10     1.97 54.4   6.49 67   \n 2     2 16.5   8.28  0.722 13.8   5.54 21.5  29.8   5.18 17.4   8.09 NA   \n 3     3 13.4   8.70  8.42  14.2   9.93 26.2  16.8  17.3   1.16  7.19 NA   \n 4     4 13.6  11.7  11.3   15.2   8.17 22.8  24.6  13.1  -2.1  13.7  NA   \n 5     5 22.7   9.66  6.77   9.78  9.74 20.2  35.9  19.2  -1.45 13.9  NA   \n 6     6 29.0  14.6  13.1   20.4  18.7  25.5  29.4  38.8   1.47 20.8  61   \n 7     7 31.4  12.1   2.42  24.9  20.6  26.5  31.8  41.2  -1.71 20.7  NA   \n 8     8 17.3   7.17  2.87  15.7   9.85 16.3  22.2  23.4   1.68 10.1  64   \n 9     9  7.75  5.69 -4.52   6.63  5.53  8.24  8.26 16.9  -5.44  5.35 -4.94\n10    10  9.33  3.00  0.677  2.96  3.42 13.4   9.70 13.7  -5.10  4.48 NA   \n11    11  7.56  3.10  3.08   3.52  2.85  9.83 13.5  16.9  -5.44  3.28  0.8 \n12    12 19.8  11.7  18.0   17.0  10.8  27.9  13.1  26.1  -3.14 12.7  NA   \n# ℹ 5 more variables: UA &lt;dbl&gt;, US &lt;dbl&gt;, VX &lt;dbl&gt;, WN &lt;dbl&gt;, YV &lt;dbl&gt;"
  },
  {
    "objectID": "Practical_day4.html#question-5",
    "href": "Practical_day4.html#question-5",
    "title": "Practical Day 4",
    "section": "2.4 Question 5",
    "text": "2.4 Question 5\n\n\nCode\n####Question 5####\n\nprop_flights &lt;- flights|&gt; filter( dep_delay&gt;0 & arr_delay &lt;=0) |&gt;\n  summarise(proportion = n()/nrow(flights))\ncat(\"The proportion of flights that were delayed but arrived on or before time\")\n\n\nThe proportion of flights that were delayed but arrived on or before time\n\n\nCode\nprint(prop_flights)\n\n\n# A tibble: 1 × 1\n  proportion\n       &lt;dbl&gt;\n1      0.105"
  },
  {
    "objectID": "Practical_day4.html#question-6",
    "href": "Practical_day4.html#question-6",
    "title": "Practical Day 4",
    "section": "2.5 Question 6",
    "text": "2.5 Question 6\n\n\nCode\n####Question 6####\n#====routes that more than one airline flies====#\n\nroute_count &lt;- flights|&gt; group_by(origin, dest) |&gt; summarise(num_airlines= n_distinct(carrier), .groups = \"drop\") |&gt; filter(num_airlines&gt;1)\ncat(\"Routes that more than one airline flies\")\n\n\nRoutes that more than one airline flies\n\n\nCode\nprint(route_count)\n\n\n# A tibble: 128 × 3\n   origin dest  num_airlines\n   &lt;chr&gt;  &lt;chr&gt;        &lt;int&gt;\n 1 EWR    ATL              4\n 2 EWR    AUS              2\n 3 EWR    BDL              2\n 4 EWR    BNA              2\n 5 EWR    BOS              3\n 6 EWR    BWI              2\n 7 EWR    CHS              2\n 8 EWR    CLE              2\n 9 EWR    CLT              3\n10 EWR    CVG              2\n# ℹ 118 more rows\n\n\nCode\n#====average arrival delay====#\n\nroute_delays &lt;- flights|&gt; filter(!is.na(arr_delay))|&gt; group_by(origin, dest, carrier) |&gt; summarise(aver_arr_delay= mean(arr_delay, na.rm=TRUE), .groups=\"drop\")\nroute_delays &lt;- route_delays %&gt;%\n  left_join(airlines, by = \"carrier\")\ncat(\"The average arrival delay\")\n\n\nThe average arrival delay\n\n\nCode\nprint(route_delays)\n\n\n# A tibble: 437 × 5\n   origin dest  carrier aver_arr_delay name                    \n   &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;            &lt;dbl&gt; &lt;chr&gt;                   \n 1 EWR    ALB   EV               14.4  ExpressJet Airlines Inc.\n 2 EWR    ANC   UA               -2.5  United Air Lines Inc.   \n 3 EWR    ATL   9E               -6.25 Endeavor Air Inc.       \n 4 EWR    ATL   DL               10.0  Delta Air Lines Inc.    \n 5 EWR    ATL   EV               19.5  ExpressJet Airlines Inc.\n 6 EWR    ATL   UA               10.5  United Air Lines Inc.   \n 7 EWR    AUS   UA                4.28 United Air Lines Inc.   \n 8 EWR    AUS   WN              -11.2  Southwest Airlines Co.  \n 9 EWR    AVL   EV                8.80 ExpressJet Airlines Inc.\n10 EWR    BDL   EV                6.78 ExpressJet Airlines Inc.\n# ℹ 427 more rows\n\n\nCode\n#====worst and best average arrival delay====#\n\nroute_performance &lt;- route_delays %&gt;%\n  group_by(origin, dest) %&gt;%\n  summarise(\n    best_airline = name[which.min(aver_arr_delay)],\n    best_delay = min(aver_arr_delay),\n    worst_airline = name[which.max(aver_arr_delay)],\n    worst_delay = max(aver_arr_delay),\n    .groups = \"drop\"\n  )\ncat(\"The worst and best average arrival delay\")\n\n\nThe worst and best average arrival delay\n\n\nCode\nprint(route_performance)\n\n\n# A tibble: 223 × 6\n   origin dest  best_airline             best_delay worst_airline    worst_delay\n   &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;                         &lt;dbl&gt; &lt;chr&gt;                  &lt;dbl&gt;\n 1 EWR    ALB   ExpressJet Airlines Inc.      14.4  ExpressJet Airl…       14.4 \n 2 EWR    ANC   United Air Lines Inc.         -2.5  United Air Line…       -2.5 \n 3 EWR    ATL   Endeavor Air Inc.             -6.25 ExpressJet Airl…       19.5 \n 4 EWR    AUS   Southwest Airlines Co.       -11.2  United Air Line…        4.28\n 5 EWR    AVL   ExpressJet Airlines Inc.       8.80 ExpressJet Airl…        8.80\n 6 EWR    BDL   ExpressJet Airlines Inc.       6.78 United Air Line…       22.6 \n 7 EWR    BNA   Southwest Airlines Co.        -2.13 ExpressJet Airl…       17.7 \n 8 EWR    BOS   ExpressJet Airlines Inc.      -4.01 JetBlue Airways         6.87\n 9 EWR    BQN   United Air Lines Inc.         10.9  United Air Line…       10.9 \n10 EWR    BTV   ExpressJet Airlines Inc.      12.2  ExpressJet Airl…       12.2 \n# ℹ 213 more rows\n\n\nCode\n#====route with the greatest difference between best and worst performance====#\n\nroute_performance &lt;- route_performance %&gt;%\n  mutate(delay_difference = worst_delay - best_delay)\ngreatest_diff_route &lt;- route_performance %&gt;%\n  filter(delay_difference == max(delay_difference))\ncat(\"The route with the greatest difference between best and worst performance\")\n\n\nThe route with the greatest difference between best and worst performance\n\n\nCode\nprint(greatest_diff_route)\n\n\n# A tibble: 1 × 7\n  origin dest  best_airline      best_delay worst_airline            worst_delay\n  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;                  &lt;dbl&gt; &lt;chr&gt;                          &lt;dbl&gt;\n1 JFK    ATL   Endeavor Air Inc.       1.40 ExpressJet Airlines Inc.         128\n# ℹ 1 more variable: delay_difference &lt;dbl&gt;\n\n\nCode\n#====reason for difference in worst and best performing airlines====#\ncat(\"Different aircraft models: Some airlines may use older or smaller planes that may have more mechanical issues, affecting punctuality. In contrast, other airlines may use newer or better-maintained aircraft that experience fewer delays.\nMaintenance schedules: Delays could be due to regular or unscheduled maintenance issues that might affect specific carriers more than others\")\n\n\nDifferent aircraft models: Some airlines may use older or smaller planes that may have more mechanical issues, affecting punctuality. In contrast, other airlines may use newer or better-maintained aircraft that experience fewer delays.\nMaintenance schedules: Delays could be due to regular or unscheduled maintenance issues that might affect specific carriers more than others\n\n\nCode\n#Aircraft Type and Maintenance\n#Different aircraft models: Some airlines may use older or smaller planes that may have more mechanical issues, affecting punctuality. In contrast, other airlines may use newer or better-maintained aircraft that experience fewer delays.\n#Maintenance schedules: Delays could be due to regular or unscheduled maintenance issues that might affect specific carriers more than others"
  },
  {
    "objectID": "Practical_day4.html#question-7",
    "href": "Practical_day4.html#question-7",
    "title": "Practical Day 4",
    "section": "2.6 Question 7",
    "text": "2.6 Question 7\n\n\nCode\n####Question 7####\n#====load data====#\n\ndata &lt;- structure(list(id = c(\"id_1\", \"id_2\", \"id_3\", \"id_4\", \"id_5\", \n                      \"id_6\", \"id_7\", \"id_8\", \"id_9\", \"id_10\", \"id_11\", \"id_12\", \"id_13\", \n                      \"id_14\", \"id_15\", \"id_16\", \"id_17\", \"id_18\", \"id_19\", \"id_20\", \n                      \"id_21\", \"id_22\", \"id_23\", \"id_24\", \"id_25\", \"id_26\", \"id_27\", \n                      \"id_28\", \"id_29\", \"id_30\", \"id_31\", \"id_32\", \"id_33\", \"id_34\", \n                      \"id_35\", \"id_36\", \"id_37\", \"id_38\", \"id_39\", \"id_40\", \"id_41\", \n                      \"id_42\", \"id_43\", \"id_44\", \"id_45\", \"id_46\", \"id_47\", \"id_48\", \n                      \"id_49\", \"id_50\"), age = c(50L, 34L, 70L, 33L, 22L, 61L, 69L, \n                                                 73L, 62L, 56L, 71L, 33L, 73L, 44L, 45L, 46L, 24L, 70L, 46L, 76L, \n                                                 47L, 76L, 28L, 48L, 54L, 27L, 45L, 26L, 61L, 28L, 38L, 55L, 33L, \n                                                 36L, 62L, 58L, 72L, 31L, 34L, 51L, 61L, 64L, 26L, 28L, 60L, 29L, \n                                                 42L, 46L, 79L, 72L), gender = c(\"male\", \"male\", \"male\", \"female\", \n                                                                                 \"female\", \"male\", \"female\", \"male\", \"male\", \"female\", \"female\", \n                                                                                 \"male\", \"male\", \"female\", \"male\", \"male\", \"male\", \"male\", \"female\", \n                                                                                 \"male\", \"male\", \"male\", \"male\", \"female\", \"femal\", \"male\", \"female\", \n                                                                                 \"female\", \"female\", \"female\", \"male\", \"female\", \"female\", \"female\", \n                                                                                 \"male\", \"male\", \"female\", \"male\", \"female\", \"female\", \"male\", \n                                                                                 \"female\", \"female\", \"male\", \"male\", \"female\", \"male\", \"male\", \n                                                                                 \"male\", \"female\"), height = c(174.4, 197.7, 174.1, 194.5, NA, \n                                                                                                               180.4, 170.5, 157.4, 196.8, 165.1, 153, 197.4, 186, 157.1, 177.5, \n                                                                                                               197.7, 179.3, 170.2, 182.4, NA, 165.4, 161, 168.5, 199.2, 157.7, \n                                                                                                               154.6, 157.1, 184.5, 181, 194.6, 183.6, 186.9, 176.1, 183, 191.1, \n                                                                                                               189.3, 199, 172, 165.6, 170.5, 150.5, 159.2, 192.1, 161.6, 162, \n                                                                                                               153.8, 162.3, 186.6, 192.4, 174.9), weight = c(69.4, 62.3, 55.6, \n                                                                                                                                                              69.5, 78.6, 60.8, 72.2, 60.9, 75.1, 67.7, 82.5, 68.7, 67.8, 76.7, \n                                                                                                                                                              87, 61.1, 70.6, 63.3, 81.5, 59.2, 93.2, 87.3, 83.4, 80.9, 68.6, \n                                                                                                                                                              76.5, 93.7, 79.1, 92, 65.6, 85.4, 63.3, 79.7, 74.1, 63.3, 78.2, \n                                                                                                                                                              95.7, 95.1, 63.7, 66.1, 99.3, 81, 96.9, 73.3, 70.3, 83, 57.6, \n                                                                                                                                                              78.6, 61.9, 98.1), blood_type = c(\"O\", \"A\", \"O\", \"O\", \"B\", \"AB\", \n                                                                                                                                                                                                \"O\", \"O\", \"O\", \"AB\", \"A\", \"O\", \"O\", \"O\", \"B\", \"A\", \"B\", \"AB\", \n                                                                                                                                                                                                \"O\", \"AB\", \"A\", \"AB\", \"O\", \"B\", \"A\", \"A\", \"B\", \"AB\", \"A\", \"B\", \n                                                                                                                                                                                                \"B\", \"A\", \"O\", \"O\", \"O\", \"B\", \"O\", \"A\", \"A\", \"B\", \"A\", \"O\", \"AB\", \n                                                                                                                                                                                                \"A\", \"A\", \"O\", \"O\", \"B\", \"A\", \"O\"), disease_status = c(\"diseased\", \n                                                                                                                                                                                                                                                       \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"diseased\", \n                                                                                                                                                                                                                                                       \"healthy\", \"diseased\", \"Healthy\", \"diseased\", \"healthy\", \"diseased\", \n                                                                                                                                                                                                                                                       \"healthy\", \"diseased\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \n                                                                                                                                                                                                                                                       \"healthy\", \"healthy\", \"diseased\", \"healthy\", \"diseased\", \"healthy\", \n                                                                                                                                                                                                                                                       \"healthy\", \"healthy\", \"healthy\", \"diseased\", \"diseased\", \"healthy\", \n                                                                                                                                                                                                                                                       \"healthy\", \"healthy\", \"diseased\", \"diseased\", \"diseased\", \"healthy\", \n                                                                                                                                                                                                                                                       \"diseased\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \"healthy\", \n                                                                                                                                                                                                                                                       \"diseased\", \"diseased\", \"diseased\", \"healthy\", \"healthy\", \"diseased\", \n                                                                                                                                                                                                                                                       \"diseased\"), cholesterol = c(228, 223, 213, 198, 166, 151, 195, \n                                                                                                                                                                                                                                                                                    199, 189, 196, 221, 156, 185, 230, 234, 174, 185, 236, 235, 180, \n                                                                                                                                                                                                                                                                                    165, 220, 160, 153, 250, 153, 184, 242, 212, 179, 224, 233, 181, \n                                                                                                                                                                                                                                                                                    199, 220, 214, 214, 248, 191, 162, 203, 173, 199, 187, 248, 189, \n                                                                                                                                                                                                                                                                                    173, 212, 164, 247), glucose = c(96, 78, 101, 119, 103, 91, 86, \n                                                                                                                                                                                                                                                                                                                     NA, 77, 80, 115, 85, 88, 109, NA, 71, 90, 94, 91, 87, 113, 93, \n                                                                                                                                                                                                                                                                                                                     97, 118, 109, 80, 85, 119, 99, 108, 89, 108, 97, 116, 79, 84, \n                                                                                                                                                                                                                                                                                                                     75, 81, 119, NA, 106, 109, 75, 82, 84, 75, 76, 120, 119, 77), \n               smoker = c(\"yes\", \"yes\", \"yes\", \"yes\", \"no\", \"yes\", \"no\", \n                          \"yes\", \"no\", \"no\", \"no\", \"no\", \"no\", \"yes\", \"no\", \"yes\", \n                          \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"no\", \n                          \"no\", \"yes\", \"yes\", \"yes\", \"no\", \"no\", \"yes\", \"no\", \"yes\", \n                          \"no\", \"yes\", \"no\", \"yes\", \"yes\", \"yes\", \"no\", \"no\", \"yes\", \n                          \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", \"yes\"), exercise = c(\"occasional\", \n                                                                                   \"regular\", \"occasional\", \"regular\", \"none\", \"occasional\", \n                                                                                   \"regular\", \"none\", \"occasional\", \"none\", \"occasional\", \"none\", \n                                                                                   \"none\", \"regular\", \"occasional\", \"none\", \"regular\", \"regular\", \n                                                                                   \"none\", \"occasional\", \"none\", \"occasional\", \"occasional\", \n                                                                                   \"occasional\", \"regular\", \"occasional\", \"regular\", \"regular\", \n                                                                                   \"regular\", \"occasional\", \"occasional\", \"none\", \"none\", \"regular\", \n                                                                                   \"occasional\", \"occasional\", \"none\", \"none\", \"none\", \"none\", \n                                                                                   \"occasional\", \"regular\", \"regular\", \"none\", \"regular\", \"occasional\", \n                                                                                   \"occasional\", \"none\", \"occasional\", \"regular\"), income = c(84820L, \n                                                                                                                                              81547L, 22588L, 72490L, 74533L, 25338L, 41469L, 57315L, 63629L, \n                                                                                                                                              88662L, 62615L, 56261L, 58499L, 82232L, 77584L, 77275L, 38468L, \n                                                                                                                                              54510L, 91326L, 78611L, 31402L, 29586L, 21441L, 58269L, 84173L, \n                                                                                                                                              88295L, 37940L, 43750L, 69750L, 92356L, 82518L, 91455L, 68866L, \n                                                                                                                                              51178L, 68275L, 27689L, 35418L, 81318L, 62405L, 86851L, 25654L, \n                                                                                                                                              47553L, 74474L, 51409L, 22607L, 55360L, 96351L, 21516L, 41927L, \n                                                                                                                                              55810L), education = c(\"master\", \"bachelor\", \"PhD\", \"master\", \n                                                                                                                                                                     \"bachelor\", \"highschool\", \"PhD\", \"highschool\", \"PhD\", \"PhD\", \n                                                                                                                                                                     \"bachelor\", \"highschool\", \"master\", \"bachelor\", \"PhD\", \"PhD\", \n                                                                                                                                                                     \"PhD\", \"bachelor\", \"master\", \"highschool\", \"PhD\", \"highschool\", \n                                                                                                                                                                     \"bachelor\", \"master\", \"highschool\", \"highschool\", \"master\", \n                                                                                                                                                                     \"master\", \"bachelor\", \"PhD\", \"highschool\", \"PhD\", \"master\", \n                                                                                                                                                                     \"master\", \"master\", \"PhD\", \"highschool\", \"master\", \"master\", \n                                                                                                                                                                     \"highschool\", \"bachelor\", \"highschool\", \"bachelor\", \"PhD\", \n                                                                                                                                                                     \"bachelor\", \"highschool\", \"master\", \"highschool\", \"bachelor\", \n                                                                                                                                                                     \"bachelor\"), region = c(\"North\", \"South\", \"North\", \"West\", \n                                                                                                                                                                                             \"North\", \"West\", \"South\", \"South\", \"West\", \"South\", \"West\", \n                                                                                                                                                                                             \"South\", \"West\", \"East\", \"North\", \"West\", \"North\", \"North\", \n                                                                                                                                                                                             \"West\", \"North\", \"East\", \"West\", \"South\", \"North\", \"North\", \n                                                                                                                                                                                             \"East\", \"East\", \"North\", \"North\", \"West\", \"South\", \"West\", \n                                                                                                                                                                                             \"West\", \"East\", \"West\", \"North\", \"West\", \"North\", \"East\", \n                                                                                                                                                                                             \"North\", \"West\", \"South\", \"South\", \"East\", \"North\", \"West\", \n                                                                                                                                                                                             \"West\", \"East\", \"North\", \"East\"), marital_status = c(\"divorced\", \n                                                                                                                                                                                                                                                  \"single\", \"divorced\", \"divorced\", \"divorced\", \"divorced\", \n                                                                                                                                                                                                                                                  \"divorced\", \"married\", \"divorced\", \"married\", \"divorced\", \n                                                                                                                                                                                                                                                  \"widowed\", \"married\", \"single\", \"widowed\", \"widowed\", \"single\", \n                                                                                                                                                                                                                                                  \"divorced\", \"widowed\", \"widowed\", \"single\", \"married\", \"single\", \n                                                                                                                                                                                                                                                  \"married\", \"widowed\", \"married\", \"single\", \"single\", \"widowed\", \n                                                                                                                                                                                                                                                  \"married\", \"widowed\", \"divorced\", \"single\", \"married\", \"single\", \n                                                                                                                                                                                                                                                  \"widowed\", \"widowed\", \"married\", \"widowed\", \"divorced\", \"married\", \n                                                                                                                                                                                                                                                  \"married\", \"divorced\", \"single\", \"married\", \"widowed\", \"divorced\", \n                                                                                                                                                                                                                                                  \"divorced\", \"single\", \"divorced\")), row.names = c(NA, -50L\n                                                                                                                                                                                                                                                  ), class = c(\"tbl_df\", \"tbl\", \"data.frame\"))\n#====Identify missing values====#\n\nmissing_values &lt;- colSums(is.na(data))\ncat(\"Columns with missing values\")\n\n\nColumns with missing values\n\n\nCode\nmissing_values\n\n\n            id            age         gender         height         weight \n             0              0              0              2              0 \n    blood_type disease_status    cholesterol        glucose         smoker \n             0              0              0              3              0 \n      exercise         income      education         region marital_status \n             0              0              0              0              0 \n\n\nCode\ncat(\"Identifying typos and inconsistencies\")\n\n\nIdentifying typos and inconsistencies\n\n\nCode\nsapply(data, unique)\n\n\n$id\n [1] \"id_1\"  \"id_2\"  \"id_3\"  \"id_4\"  \"id_5\"  \"id_6\"  \"id_7\"  \"id_8\"  \"id_9\" \n[10] \"id_10\" \"id_11\" \"id_12\" \"id_13\" \"id_14\" \"id_15\" \"id_16\" \"id_17\" \"id_18\"\n[19] \"id_19\" \"id_20\" \"id_21\" \"id_22\" \"id_23\" \"id_24\" \"id_25\" \"id_26\" \"id_27\"\n[28] \"id_28\" \"id_29\" \"id_30\" \"id_31\" \"id_32\" \"id_33\" \"id_34\" \"id_35\" \"id_36\"\n[37] \"id_37\" \"id_38\" \"id_39\" \"id_40\" \"id_41\" \"id_42\" \"id_43\" \"id_44\" \"id_45\"\n[46] \"id_46\" \"id_47\" \"id_48\" \"id_49\" \"id_50\"\n\n$age\n [1] 50 34 70 33 22 61 69 73 62 56 71 44 45 46 24 76 47 28 48 54 27 26 38 55 36\n[26] 58 72 31 51 64 60 29 42 79\n\n$gender\n[1] \"male\"   \"female\" \"femal\" \n\n$height\n [1] 174.4 197.7 174.1 194.5    NA 180.4 170.5 157.4 196.8 165.1 153.0 197.4\n[13] 186.0 157.1 177.5 179.3 170.2 182.4 165.4 161.0 168.5 199.2 157.7 154.6\n[25] 184.5 181.0 194.6 183.6 186.9 176.1 183.0 191.1 189.3 199.0 172.0 165.6\n[37] 150.5 159.2 192.1 161.6 162.0 153.8 162.3 186.6 192.4 174.9\n\n$weight\n [1] 69.4 62.3 55.6 69.5 78.6 60.8 72.2 60.9 75.1 67.7 82.5 68.7 67.8 76.7 87.0\n[16] 61.1 70.6 63.3 81.5 59.2 93.2 87.3 83.4 80.9 68.6 76.5 93.7 79.1 92.0 65.6\n[31] 85.4 79.7 74.1 78.2 95.7 95.1 63.7 66.1 99.3 81.0 96.9 73.3 70.3 83.0 57.6\n[46] 61.9 98.1\n\n$blood_type\n[1] \"O\"  \"A\"  \"B\"  \"AB\"\n\n$disease_status\n[1] \"diseased\" \"healthy\"  \"Healthy\" \n\n$cholesterol\n [1] 228 223 213 198 166 151 195 199 189 196 221 156 185 230 234 174 236 235 180\n[20] 165 220 160 153 250 184 242 212 179 224 233 181 214 248 191 162 203 173 187\n[39] 164 247\n\n$glucose\n [1]  96  78 101 119 103  91  86  NA  77  80 115  85  88 109  71  90  94  87 113\n[20]  93  97 118  99 108  89 116  79  84  75  81 106  82  76 120\n\n$smoker\n[1] \"yes\" \"no\" \n\n$exercise\n[1] \"occasional\" \"regular\"    \"none\"      \n\n$income\n [1] 84820 81547 22588 72490 74533 25338 41469 57315 63629 88662 62615 56261\n[13] 58499 82232 77584 77275 38468 54510 91326 78611 31402 29586 21441 58269\n[25] 84173 88295 37940 43750 69750 92356 82518 91455 68866 51178 68275 27689\n[37] 35418 81318 62405 86851 25654 47553 74474 51409 22607 55360 96351 21516\n[49] 41927 55810\n\n$education\n[1] \"master\"     \"bachelor\"   \"PhD\"        \"highschool\"\n\n$region\n[1] \"North\" \"South\" \"West\"  \"East\" \n\n$marital_status\n[1] \"divorced\" \"single\"   \"married\"  \"widowed\" \n\n\nCode\ntable(data$gender)\n\n\n\n femal female   male \n     1     22     27"
  },
  {
    "objectID": "Practical1.html",
    "href": "Practical1.html",
    "title": "Practical 1",
    "section": "",
    "text": "Code\n####set-up####\n#====airquality dataset====#\n\ndata(airquality)\n\n#====cars dataset====#\n\ndata(cars)"
  },
  {
    "objectID": "Practical1.html#setting-up-the-air-quality-and-cars-data-set",
    "href": "Practical1.html#setting-up-the-air-quality-and-cars-data-set",
    "title": "Practical 1",
    "section": "",
    "text": "Code\n####set-up####\n#====airquality dataset====#\n\ndata(airquality)\n\n#====cars dataset====#\n\ndata(cars)"
  },
  {
    "objectID": "Practical1.html#calculating-the-missing-values",
    "href": "Practical1.html#calculating-the-missing-values",
    "title": "Practical 1",
    "section": "2.1 Calculating the missing values",
    "text": "2.1 Calculating the missing values\n\n\nCode\n####missing values####\n\nmissing_matrix&lt;-rowSums(is.na(airquality)) #number of missing in each row\nmissing_row_indices&lt;- which(missing_matrix&gt;0) #the indices of rows with missing values\ncat(\"The missing value indices\")\n\n\nThe missing value indices\n\n\nCode\nprint(missing_row_indices)\n\n\n [1]   5   6  10  11  25  26  27  32  33  34  35  36  37  39  42  43  45  46  52\n[20]  53  54  55  56  57  58  59  60  61  65  72  75  83  84  96  97  98 102 103\n[39] 107 115 119 150"
  },
  {
    "objectID": "Practical1.html#data-statistics",
    "href": "Practical1.html#data-statistics",
    "title": "Practical 1",
    "section": "2.2 Data statistics",
    "text": "2.2 Data statistics\n\n\nCode\n####data statistics####\n#====create function====#\n\ncalc_stats&lt;- function(x) {(c(mean = mean(x, na.rm=TRUE),\n                             sd = sd(x, na.rm=TRUE),\n                             min = min(x, na.rm=TRUE),\n                             max = max(x, na.rm=TRUE)))\n\n}\n\n#====calculate stats====#\ncat(\"Statisics for Temp and Ozone\")\n\n\nStatisics for Temp and Ozone\n\n\nCode\ncalc_stats(airquality$Temp)\n\n\n    mean       sd      min      max \n77.88235  9.46527 56.00000 97.00000 \n\n\nCode\ncalc_stats(airquality$Ozone)\n\n\n     mean        sd       min       max \n 42.12931  32.98788   1.00000 168.00000"
  },
  {
    "objectID": "Practical1.html#cars-data-set-variables",
    "href": "Practical1.html#cars-data-set-variables",
    "title": "Practical 1",
    "section": "2.3 Cars data set variables",
    "text": "2.3 Cars data set variables\n\n\nCode\n####creating variables####\n\nY&lt;- cars$dist\nX&lt;- cbind(1, cars$speed)"
  },
  {
    "objectID": "Practical1.html#estimating-the-coefficients-manually",
    "href": "Practical1.html#estimating-the-coefficients-manually",
    "title": "Practical 1",
    "section": "2.4 Estimating the coefficients manually",
    "text": "2.4 Estimating the coefficients manually\n\n\nCode\n####estimating coefficients####\n#====calculating beta hat====#\n\nbeta_hat&lt;- solve(t(X) %*% X) %*% t(X) %*%Y\n\n#====estimates using matrix calculations====#\n\ncat(\"Estimates using matrix calculation\", \"\\n\", beta_hat)\n\n\nEstimates using matrix calculation \n -17.57909 3.932409"
  },
  {
    "objectID": "Practical1.html#manually-calculating-and-outputting-the-regression-values",
    "href": "Practical1.html#manually-calculating-and-outputting-the-regression-values",
    "title": "Practical 1",
    "section": "2.5 Manually calculating and outputting the regression values",
    "text": "2.5 Manually calculating and outputting the regression values\n\n\nCode\n####regression output using functions####\n\nreg_function &lt;- function(a,b){\n  #====calc beta====#\n  beta_hat&lt;- solve(t(X) %*% X) %*% t(X) %*%Y\n #====residuals====#\n  y_hat &lt;- X %*% beta_hat \n  residuals &lt;- Y-y_hat\n  resid_stats &lt;- function(x) {(c(mean = mean(x, na.rm=TRUE),\n                                 median = median(x, na.rm=TRUE),\n                                 min = min(x, na.rm=TRUE),\n                                 max = max(x, na.rm=TRUE),\n                                 Q1= quantile(x,prob=0.25),\n                                 Q3 = quantile(x, prob=0.75)))}\n   resid_stats(round(residuals, 5))\n  #====residual variance====#\n  n &lt;- length(Y) #number of observations\n  p &lt;-  ncol(X) #number of predictors including intercept \n  residual_var &lt;- sum(residuals^2) / (n - p)\n  \n  #====calc se====#\n  cov_matrix &lt;- residual_var * solve(t(X) %*% X)\n  standard_errors &lt;- sqrt(diag(cov_matrix))\n  \n  #====t values of coefficients====#\n  t_values &lt;- beta_hat / standard_errors\n\n  #====calc pvalue====#\n  p_values &lt;- 2 * pt(-abs(t_values), df = n - p)\n  \n  #====R-squared calculations====#\n  total_sum_of_squares &lt;- sum((Y - mean(Y))^2)\n  residual_sum_of_squares &lt;- sum(residuals^2)\n  r_squared &lt;- 1 - (residual_sum_of_squares / total_sum_of_squares)\n  \n  #====Adjusted R-squared====#\n  adjusted_r_squared &lt;- 1 - ((residual_sum_of_squares / (n - p)) / (total_sum_of_squares / (n - 1)))\n  \n  #====F stat====#\n  #total sum of squares = residual sum of squares + regression sum of squares\n  SSR &lt;- total_sum_of_squares - residual_sum_of_squares\n  \n  #====Degrees of freedom====#\n  n &lt;- length(Y)       # Number of observations\n  p &lt;- ncol(X)         # Number of parameters (intercept + predictors)\n  df1 &lt;- p - 1         # Degrees of freedom for regression\n  df2 &lt;- n - p         # Degrees of freedom for residuals\n  \n  #====Mean Square Regression (MSR) and Mean Square Error (MSE)====#\n  MSR &lt;- SSR / df1\n  MSE &lt;- residual_sum_of_squares / df2\n  \n  #====F-statistic====#\n  F_stat &lt;- MSR / MSE\n  \n  #====p-value for F-statistic====#\n  p_value &lt;- 1 - pf(F_stat, df1, df2)\n  \n  #====print results====#\n  cat(\"Beta Estimates (Manual Calculation):\", beta_hat, \"\\n\")\n  cat(\"Standard Errors:\", standard_errors, \"with df\", n-p, \"\\n\")\n  cat(\"T-Values:\", t_values, \"\\n\")\n  cat(\"P-Values:\", p_values, \"\\n\")\n  cat(\"R-Squared:\", r_squared, \"\\n\")\n  cat(\"Adjusted R-Squared:\", adjusted_r_squared, \"\\n\")\n  cat(\"F-Statistic:\", F_stat, \"\\n\")\n  cat(\"Degrees of Freedom: df1 =\", df1, \", df2 =\", df2, \"\\n\")\n  cat(\"P-Value:\", p_value, \"\\n\")\n}\n#====get output from function====#\n\nreg_function(X,Y)\n\n\nBeta Estimates (Manual Calculation): -17.57909 3.932409 \nStandard Errors: 6.75844 0.4155128 with df 48 \nT-Values: -2.601058 9.46399 \nP-Values: 0.01231882 1.489836e-12 \nR-Squared: 0.6510794 \nAdjusted R-Squared: 0.6438102 \nF-Statistic: 89.56711 \nDegrees of Freedom: df1 = 1 , df2 = 48 \nP-Value: 1.489919e-12"
  },
  {
    "objectID": "Practical1.html#using-the-built-in-regression-function",
    "href": "Practical1.html#using-the-built-in-regression-function",
    "title": "Practical 1",
    "section": "2.6 Using the built-in regression function",
    "text": "2.6 Using the built-in regression function\n\n\nCode\n####estimates using regression####\n\nmodel&lt;- lm(dist~speed, data=cars)\ncat(\"Estimates using regression:\\n\")\n\n\nEstimates using regression:\n\n\nCode\nsummary(model)\n\n\n\nCall:\nlm(formula = dist ~ speed, data = cars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-29.069  -9.525  -2.272   9.215  43.201 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -17.5791     6.7584  -2.601   0.0123 *  \nspeed         3.9324     0.4155   9.464 1.49e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 15.38 on 48 degrees of freedom\nMultiple R-squared:  0.6511,    Adjusted R-squared:  0.6438 \nF-statistic: 89.57 on 1 and 48 DF,  p-value: 1.49e-12"
  },
  {
    "objectID": "Practical2.html",
    "href": "Practical2.html",
    "title": "Practical 2",
    "section": "",
    "text": "Code\n####set-up####\nset.seed(1)\nx &lt;-1:100\ny &lt;- sin(x/10) + rnorm(100, mean=0, sd=0.2)"
  },
  {
    "objectID": "Practical2.html#setting-up-the-data",
    "href": "Practical2.html#setting-up-the-data",
    "title": "Practical 2",
    "section": "",
    "text": "Code\n####set-up####\nset.seed(1)\nx &lt;-1:100\ny &lt;- sin(x/10) + rnorm(100, mean=0, sd=0.2)"
  },
  {
    "objectID": "Practical2.html#creating-the-lowess-function",
    "href": "Practical2.html#creating-the-lowess-function",
    "title": "Practical 2",
    "section": "2.1 Creating the lowess function",
    "text": "2.1 Creating the lowess function\n\n\nCode\n####lowess function####\ncustomLowess &lt;- function(x,y,f) {\n  n &lt;- length(x)\n  y_smooth &lt;- numeric(n)\n  for (i in 1:n) {\n    # Compute weights based on tricube function\n    distances &lt;- abs(x - x[i])\n    max_dist &lt;- sort(distances)[round(f * n)]\n    weights &lt;- (1 - (distances / max_dist)^3)^3 * (distances &lt; max_dist)\n    # Perform weighted linear regression\n    model &lt;- lm(y ~ x, weights = weights)\n    y_smooth[i] &lt;- predict(model, newdata = data.frame(x = x[i]))\n  }\n  return(y_smooth)\n}\n#====Apply custom LOWESS function====#\n\nf_value &lt;- 0.2  # Smoothing parameter\ny_custom &lt;- customLowess(x, y, f = f_value)\n#====Apply built-in lowess function====#\nlowess_result &lt;- lowess(x, y, f = f_value, iter = 0)"
  },
  {
    "objectID": "Practical2.html#plotting-the-results",
    "href": "Practical2.html#plotting-the-results",
    "title": "Practical 2",
    "section": "2.2 Plotting the results",
    "text": "2.2 Plotting the results\n\n\nCode\n####Plot results####\nplot(x, y, main = \"LOWESS Smoothing Comparison\", col = \"gray\", pch = 16, xlab = \"X\", ylab = \"Y\")\nlines(x, y_custom, col = \"blue\", lwd = 2, lty = 2)  # Custom LOWESS\nlines(lowess_result, col = \"red\", lwd = 2)         # Built-in LOWESS\nlegend(\"topright\", legend = c(\"Custom LOWESS\", \"Built-in LOWESS\"),\n       col = c(\"blue\", \"red\"), lwd = 2, lty = c(2, 1))"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home Page",
    "section": "",
    "text": "Welcome to My Practical Answers\nThank you for visiting! This site contains my solutions for Practical 1, Practical 2, and Practical Day 4, covering key concepts and exercises.\nEach section includes detailed answers, explanations, and code implementations where necessary. Feel free to navigate through the different practicals using the menu above.\nThe link to Git : https://github.com/Tamika24/Practical1"
  }
]